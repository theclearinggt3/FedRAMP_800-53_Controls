cat = igraph::get.vertex.attribute(g, attr )
#!! have to convert vertex values from chartacter to factor
assortativity = assortativity_nominal(g, as.factor(cat), directed = F)
return(assortativity);
}
get_degree <- function(g, attr){
cat = igraph::get.vertex.attribute(g, attr )
V(g)$degree = igraph::degree(g)
V(g)$strength = igraph::strength(g)
return(g)
}
get_transitivity <- function(g) {
cc = transitivity(g, type='local', vids=V(g)$name)
V(g)$cc = cc
return(g)
}
get_group_confusion <- function(nodes, edges, attr) {
from_to = select(edges, Source, Target)
from_to$Source = as.character(from_to$Source)
from_to$Target = as.character(from_to$Target)
nodes$Id = as.character(nodes$Id)
from_to = left_join(from_to, nodes, by= c('Source' = 'Id'))
from_to = left_join(from_to, nodes, by= c('Target' = 'Id'))
x = paste0(attr, '.x')
y = paste0(attr, '.y')
cols <- c(x, y)
colNums <- match(cols,colnames(from_to))
fg_tg = select_(from_to, x, y)
colnames(fg_tg) = c('node_a', 'node_b')
Source_Groups = as.factor(fg_tg$node_a);
Target_Groups = as.factor(fg_tg$node_b);
tbl = table(Source_Groups, Target_Groups)
prop_table = prop.table(tbl)
#since it is undirected graph, convert it into triangular
p1 = prop_table;
p2 = t(prop_table);
p3 = p1 + p2
p4 = lower.tri.remove(p3)
diag(p4) = diag(p4) / 2
prop_table = p4
return(prop_table)
}
get_cliques_membership <- function(g, n, attr) {
cs  = cliques(g, min=n)
cs_len = sapply(cs, length)
cs_n = cs[cs_len == n]
cat = unique(igraph::get.vertex.attribute(g, attr))
numCli = length(cs_n)
m = matrix(0, nrow = numCli, ncol = length(cat))
colnames(m) = cat
#looping throught cliques to count membership by groups
for (i in 1:numCli) {
c = cs_n[[i]]
a = vertex_attr(g,attr, c)
for (ct in cat) {
m[i,ct] = sum(a==ct)
}
}
return(m)
}
get_confusion_within_group <- function(prop_table) {
conf_mtx <- prop_table
conf_mtx[lower.tri(conf_mtx)]<-t(conf_mtx)[lower.tri(conf_mtx)]
conf_mtx <- data.frame(conf_mtx) %>% dplyr::mutate(Source_Groups = as.character(Source_Groups),
Target_Groups = as.character(Target_Groups))
lvl <- unique(conf_mtx$Source_Groups)
conf_mtx[,"percent_within"] = NA
for (i in 1:nrow(conf_mtx)){
for (j in 1:length(lvl)){
if (conf_mtx[i,"Source_Groups"] == lvl[j]){
sum_relevant_rows <- conf_mtx %>% dplyr::filter(Source_Groups == lvl[j])
sum_relevant_rows <- sum(sum_relevant_rows$Freq)
conf_mtx[i,"percent_within"] = as.numeric(conf_mtx[i,"Freq"])/sum_relevant_rows
}
else {return}
}
}
return(conf_mtx)
}
get_in_out_tbl <- function(conf_mtx){
sum_tbl <- conf_mtx %>% dplyr::group_by(Source_Groups) %>%
dplyr::summarise(dist = sum(Freq)) %>%
select(Source_Groups,dist) %>%
filter(is.na(dist)==FALSE) %>%
arrange(desc(dist))
in_out_pct <- conf_mtx %>%
dplyr::mutate(match = ifelse(Source_Groups == Target_Groups,"within group","outside group"),
percent_within = ifelse(is.na(percent_within)==TRUE, 0, percent_within)) %>%
dplyr::group_by(Source_Groups, match) %>%
dplyr::summarise(in_out_pct = sum(percent_within))
return(in_out_pct)
}
analyze_graph <- function(g, nodes, edges, attr) {
#attr: Family Name
stats = list()
print(attr)
# 1.Assortativity
assortativity = get_assortativity(g, attr)
stats$assortativity = assortativity
# 2. Average degree, Transtivity, and Degee distributions
g = get_degree(g, attr)
g = get_transitivity(g)
var = vertex_attr(g, attr)
lvls =  unique(var)
lvl_len = length(lvls)
dgs = list()
trs = list()
strs = list()
dg_dist = list()
for (i in 1:lvl_len) {
lvl = lvls[i]
lvl_nodes = V(g)[var == lvl]
dgs[[lvl]] = mean(lvl_nodes$degree,  na.rm = TRUE)
trs[[lvl]] = mean(lvl_nodes$cc,  na.rm = TRUE)
strs[[lvl]] = mean(lvl_nodes$strength,  na.rm = TRUE)
dg = degree.distribution(g, v=lvl_nodes)
dg_dist[[lvl]] = dg
}
dgs[['all_nodes']] =   mean(V(g)$degree, na.rm = TRUE)
strs[['all_nodes']] =   mean(V(g)$strength, na.rm = TRUE)
all_dg = degree.distribution(g)
dg_dist[['all_nodes']] = all_dg
stats$degree = dgs
stats$strength = strs
stats$transitivity = trs
stats$degree_dist =  dg_dist
# 3. Confusion matrix dyad level
prop_table = get_group_confusion(nodes, edges, attr)
stats$prop_table = prop_table
# 3a. Within group vs Outside group %
in_out_table = get_in_out_tbl(get_confusion_within_group(prop_table))
stats$in_out_table = in_out_table
## Calcuate graph level statistics
## The ratio of the number of edges and the number of possible edges
stats$density = edge_density(g, loops=FALSE)
## Count group membership in complete triad graph
print(paste(rep('#', 30),collapse = ''))
n = 3
m = get_cliques_membership(g, n, attr)
triad_counts = list()
for (i in 1:lvl_len) {
lvl = lvls[i]
lvl_nodes = V(g)[var == lvl]
triad_count = sum(m[, lvl] == 3)
triad_counts[[lvl]] = triad_count
}
stats$triads_counts = triad_counts
return(stats)
}
get_stats <- function(g, attr) {
all_years_stats = analyze_graph(g, nodes, edges, attr)
stats = list()
stats[['all_years_stats']] = all_years_stats
return(stats)
}
plot_block_heatmap <- function(conf) {
conf.l = melt(conf)
ggplot(conf.l, aes(Source_Groups, Target_Groups)) + geom_tile(aes(fill = value),colour = "white")  +
scale_fill_gradient(low = "white", high = "steelblue") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
}
plot_in_out <- function(stats, attr_name){
plot.data <- stats$all_years_stats$in_out_table %>%
arrange(Source_Groups, desc(match))
plot.data$Source_Groups <- as.factor(plot.data$Source_Groups)
ggplot(data=plot.data, aes(x=Source_Groups, y=in_out_pct, fill=match)) +
geom_bar(stat='identity') + coord_flip() +
scale_fill_manual(values=c("slategray2", "navyblue")) +
xlab(attr_name) + ylab("Percentage of Control Family") +
ggtitle("Percentage of Collaboration Within and Outside of Control Family")
}
print_stat <- function(all_years_stats) {
#Print Assortativity
print(paste(c(rep('#', 15), 'assortativity', rep('#', 15)),collapse = ''))
print(paste0('assortativity: ', as.character(all_years_stats$assortativity)))
cat('\n')
cat('\n')
#Print Degree
print(paste(c(rep('#', 15), 'Degree', rep('#', 15)),collapse = ''))
dgs = all_years_stats[['degree']]
dns = names(dgs)
for (d in dns) {
print(paste0('Average ', d,  ' Degree: ', sprintf("%.6f",dgs[[d]] )))
}
cat('\n')
cat('\n')
#Print Confusion table
print(paste(c(rep('#', 15), 'Confusion Table', rep('#', 15)),collapse = ''))
print(all_years_stats$prop_table)
cat('\n')
cat('\n')
#Print Transitivity
print(paste(c(rep('#', 15), 'Transitivity', rep('#', 15)),collapse = ''))
print('The below statistics ignore nodes without edges')
trs = all_years_stats[['transitivity']]
tns = names(trs)
for (t in tns) {
print(paste0('Average ', t,  ' Transitivity: ', sprintf("%.6f",trs[[t]] )))
}
cat('\n')
cat('\n')
#print Triad count
print(paste(c(rep('#', 15), 'Complete Triads', rep('#', 15)),collapse = ''))
t_c = all_years_stats[['triads_counts']]
tns = names(t_c)
for (t in tns) {
print(paste0('The number of  ', t,  ' Complete Triads: ', sprintf("%.6f",t_c[[t]] )))
}
cat('\n')
cat('\n')
}
g <- build_graph(nodes, edges)
E(g)[[]]     # The edges of the "net" object
V(g)[[]]     # The vertices of the "net" object
plot(g)
q1_stats = get_stats(g, attr='Family_Name')
from_to = select(edges, Source, Target)
from_to$Source = as.character(from_to$Source)
from_to$Target = as.character(from_to$Target)
nodes$Id = as.character(nodes$Id)
from_to = left_join(from_to, nodes, by= c('Source' = 'Id'))
from_to = left_join(from_to, nodes, by= c('Target' = 'Id'))
x = paste0(attr, '.x')
View(from_to)
x = paste0('Family_Name', '.x')
y = paste0('Family_Name', '.y')
cols <- c(x, y)
colNums <- match(cols,colnames(from_to))
fg_tg = select_(from_to, x, y)
colnames(fg_tg) = c('node_a', 'node_b')
Source_Groups = as.factor(fg_tg$node_a);
Target_Groups = as.factor(fg_tg$node_b);
tbl = table(Source_Groups, Target_Groups)
prop_table = prop.table(tbl)
p1 = prop_table;
prop_table
p2 = t(prop_table);
from_to = select(edges, Source, Target)
from_to$Source = as.character(from_to$Source)
from_to$Target = as.character(from_to$Target)
nodes$Id = as.character(nodes$Id)
from_to = left_join(from_to, nodes, by= c('Source' = 'Id'))
from_to = left_join(from_to, nodes, by= c('Target' = 'Id'))
x = paste0('Family_Name', '.x')
y = paste0('Family_Name', '.y')
cols <- c(x, y)
colNums <- match(cols,colnames(from_to))
fg_tg = select_(from_to, x, y)
colnames(fg_tg) = c('node_a', 'node_b')
Source_Groups = as.factor(fg_tg$node_a);
Target_Groups = as.factor(fg_tg$node_b);
tbl = table(Source_Groups, Target_Groups)
View(fg_tg)
from_to = select(edges, Source, Target)
rm(from_to, cols, colNums, fg_tg, tbl, prop_table, p1, p2)
from_to = select(edges, Source, Target)
View(from_to)
from_to$Source = as.character(from_to$Source)
from_to$Target = as.character(from_to$Target)
nodes$Id = as.character(nodes$Id)
from_to = left_join(from_to, nodes, by= c('Source' = 'Id'))
from_to = left_join(from_to, nodes, by= c('Target' = 'Id'))
x = paste0('Family_Name', '.x')
y = paste0('Family_Name', '.y')
cols <- c(x, y)
colNums <- match(cols,colnames(from_to))
fg_tg = select_(from_to, x, y)
View(fg_tg)
rm(fg_tg)
fg_tg = select(from_to, x, y)
View(fg_tg)
rm(fg_tg)
fg_tg = select_(from_to, x, y)
colnames(fg_tg) = c('node_a', 'node_b')
rm(fg_tg)
fg_tg = select_(from_to, x, y)
rm(from_to, cols, colNums, fg_tg, tbl, prop_table, p1, p2)
rm(from_to, cols, colNums, fg_tg)
rm(from_to, cols, colNums)
rm(x, y)
rm(Source_Groups, Target_Groups)
from_to = select(edges, Source, Target)
View(from_to)
from_to$Source = as.character(from_to$Source)
from_to$Target = as.character(from_to$Target)
nodes$Id = as.character(nodes$Id)
from_to = left_join(from_to, nodes, by= c('Source' = 'Id'))
from_to = left_join(from_to, nodes, by= c('Target' = 'Id'))
x = paste0('Family_Name', '.x')
y = paste0('Family_Name', '.y')
cols <- c(x, y)
colNums <- match(cols,colnames(from_to))
fg_tg = select_(from_to, x, y)
View(fg_tg)
View(from_to)
fg_tg = select_(from_to, x, y)
fg_tg = select_(from_to, x, y)
rm(fg_tg)
fg_tg = select_(from_to, x)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
View(fg_tg)
fg_tg = select_(from_to, x)
rm(fg_tg)
fg_tg <- from_to %>%
select(x,y)
library(readxl)
library(readr)
library(tidyverse)
Controls <- read_excel("/Users/eugenehwang/Documents/GitHub/FedRAMP_800-53_Controls/800-53 subcontrol relations.xlsx")
#Set working directory path
#setwd("/Users/eugenehwang/Documents/FedRAMP/Data")
setwd("/Users/eugenehwang/Documents/GitHub/FedRAMP_800-53_Controls")
#Get working directory path
getwd()
#Selecting only the columns needed and renaming columns with underscore **
Controls_mod <- Controls
names(Controls_mod) <- c("Control_Family","Family_Name","Control_Name", "Main_Control","Control_Enhancement_Name", "Control_Enhancement","Combined","Related_Controls","Low","Low_1","Tailoring_Action","Medium","Medium_1","High","High_1","Priority","Impact")
#Only looking at High Impact Controls
Gephi_Controls <- Controls_mod %>%
filter(High == "Y") %>% #filtering to High Baseline
select(Control_Family, Family_Name, Main_Control, Contro
Gephi_Controls1 <- Gephi_Controls %>%
Gephi_Controls <- Controls_mod %>%
filter(High == "Y") %>% #filtering to High Baseline
select(Control_Family, Family_Name, Main_Control, Control_Name, Control_Enhancement, Combined, Related_Controls)
#,Low, Medium, High, Impact, Tailoring_Action)
library(readxl)
library(readr)
library(tidyverse)
Controls <- read_excel("/Users/eugenehwang/Documents/GitHub/FedRAMP_800-53_Controls/800-53 subcontrol relations.xlsx")
Controls_mod <- Controls
names(Controls_mod) <- c("Control_Family","Family_Name","Control_Name", "Main_Control","Control_Enhancement_Name", "Control_Enhancement","Combined","Related_Controls","Low","Low_1","Tailoring_Action","Medium","Medium_1","High","High_1","Priority","Impact")
>>>>>>> 62a325e296218945a12e11681cc48cef2fcee0b8
Gephi_Controls <- Controls_mod %>%
filter(High == "Y") %>% #filtering to High Baseline
select(Control_Family, Family_Name, Main_Control, Control_Name, Control_Enhancement, Combined, Related_Controls)
#,Low, Medium, High, Impact, Tailoring_Action)
Gephi_Controls1 <- Gephi_Controls %>%
select(-Control_Enhancement) %>%
separate(Related_Controls, paste("Related_Control", 1:28, sep = "_"),
sep = ",",
extra = "warn") %>% #spreading Related Controls into different columns
mutate(Related_Control_1 = str_trim(Related_Control_1, side = "both"),
Related_Control_2 = str_trim(Related_Control_2, side = "both"),
Related_Control_3 = str_trim(Related_Control_3, side = "both"),
Related_Control_4 = str_trim(Related_Control_4, side = "both"),
Related_Control_5 = str_trim(Related_Control_5, side = "both"),
Related_Control_6 = str_trim(Related_Control_6, side = "both"),
Related_Control_7 = str_trim(Related_Control_7, side = "both"),
Related_Control_8 = str_trim(Related_Control_8, side = "both"),
Related_Control_9 = str_trim(Related_Control_9, side = "both"),
Related_Control_10 = str_trim(Related_Control_10, side = "both"),
Related_Control_11 = str_trim(Related_Control_11, side = "both"),
Related_Control_12 = str_trim(Related_Control_12, side = "both"),
Related_Control_13 = str_trim(Related_Control_13, side = "both"),
Related_Control_14 = str_trim(Related_Control_14, side = "both"),
Related_Control_15 = str_trim(Related_Control_15, side = "both"),
Related_Control_16 = str_trim(Related_Control_16, side = "both"),
Related_Control_17 = str_trim(Related_Control_17, side = "both"),
Related_Control_18 = str_trim(Related_Control_18, side = "both"),
Related_Control_19 = str_trim(Related_Control_19, side = "both"),
Related_Control_20 = str_trim(Related_Control_20, side = "both"),
Related_Control_21 = str_trim(Related_Control_21, side = "both"),
Related_Control_22 = str_trim(Related_Control_22, side = "both"),
Related_Control_23 = str_trim(Related_Control_23, side = "both"),
Related_Control_24 = str_trim(Related_Control_24, side = "both"),
Related_Control_25 = str_trim(Related_Control_25, side = "both"),
Related_Control_26 = str_trim(Related_Control_26, side = "both"),
Related_Control_27 = str_trim(Related_Control_27, side = "both"),
<<<<<<< HEAD
Related_Control_28 = str_trim(Related_Control_28, side = "both")) #removing empty spaces in those variable's values.
=======
Related_Control_28 = str_trim(Related_Control_28, side = "both"))
>>>>>>> 62a325e296218945a12e11681cc48cef2fcee0b8
Gephi_Controls2 <- Gephi_Controls %>%
select(-Control_Enhancement, -Combined) %>%
separate(Related_Controls, paste("Related_Control", 1:28, sep = "_"),
sep = ",",
extra = "warn") %>% #spreading Related Controls into different columns
gather(AllRelatedControls, Value,
Related_Control_1:Related_Control_28, na.rm = TRUE) %>%
group_by(Main_Control) %>%
mutate(AllRelatedControls2 = paste("Related_Control", 1:n(), sep = "_")) %>%
ungroup() %>%
select(-AllRelatedControls) %>%
spread(AllRelatedControls2, Value, convert = TRUE) %>%
select(Control_Family, Family_Name, Main_Control, Control_Name, #Low, Medium, High, Impact,
Related_Control_1, Related_Control_2, Related_Control_3, Related_Control_4, Related_Control_5,
Related_Control_6, Related_Control_7, Related_Control_8, Related_Control_9, Related_Control_10,
Related_Control_11, Related_Control_12, Related_Control_13, Related_Control_14, Related_Control_15,
Related_Control_16, Related_Control_17, Related_Control_18, Related_Control_19, Related_Control_20,
Related_Control_21, Related_Control_22, Related_Control_23, Related_Control_24, Related_Control_25,
Related_Control_26, Related_Control_27, Related_Control_28, Related_Control_29, Related_Control_30,
Related_Control_31, Related_Control_32, Related_Control_33, Related_Control_34, Related_Control_35,
Related_Control_36, Related_Control_37) %>% #reording the variables in the table
mutate(Related_Control_1 = str_trim(Related_Control_1, side = "both"),
Related_Control_2 = str_trim(Related_Control_2, side = "both"),
Related_Control_3 = str_trim(Related_Control_3, side = "both"),
Related_Control_4 = str_trim(Related_Control_4, side = "both"),
Related_Control_5 = str_trim(Related_Control_5, side = "both"),
Related_Control_6 = str_trim(Related_Control_6, side = "both"),
Related_Control_7 = str_trim(Related_Control_7, side = "both"),
Related_Control_8 = str_trim(Related_Control_8, side = "both"),
Related_Control_9 = str_trim(Related_Control_9, side = "both"),
Related_Control_10 = str_trim(Related_Control_10, side = "both"),
Related_Control_11 = str_trim(Related_Control_11, side = "both"),
Related_Control_12 = str_trim(Related_Control_12, side = "both"),
Related_Control_13 = str_trim(Related_Control_13, side = "both"),
Related_Control_14 = str_trim(Related_Control_14, side = "both"),
Related_Control_15 = str_trim(Related_Control_15, side = "both"),
Related_Control_16 = str_trim(Related_Control_16, side = "both"),
Related_Control_17 = str_trim(Related_Control_17, side = "both"),
Related_Control_18 = str_trim(Related_Control_18, side = "both"),
Related_Control_19 = str_trim(Related_Control_19, side = "both"),
Related_Control_20 = str_trim(Related_Control_20, side = "both"),
Related_Control_21 = str_trim(Related_Control_21, side = "both"),
Related_Control_22 = str_trim(Related_Control_22, side = "both"),
Related_Control_23 = str_trim(Related_Control_23, side = "both"),
Related_Control_24 = str_trim(Related_Control_24, side = "both"),
Related_Control_25 = str_trim(Related_Control_25, side = "both"),
Related_Control_26 = str_trim(Related_Control_26, side = "both"),
Related_Control_27 = str_trim(Related_Control_27, side = "both"),
Related_Control_28 = str_trim(Related_Control_28, side = "both"),
Related_Control_29 = str_trim(Related_Control_29, side = "both"),
Related_Control_30 = str_trim(Related_Control_30, side = "both"),
Related_Control_31 = str_trim(Related_Control_31, side = "both"),
Related_Control_32 = str_trim(Related_Control_32, side = "both"),
Related_Control_33 = str_trim(Related_Control_33, side = "both"),
Related_Control_34 = str_trim(Related_Control_34, side = "both"),
Related_Control_35 = str_trim(Related_Control_35, side = "both"),
Related_Control_36 = str_trim(Related_Control_36, side = "both"),
<<<<<<< HEAD
Related_Control_37 = str_trim(Related_Control_37, side = "both")) #removing empty spaces in those variable's values.
=======
Related_Control_37 = str_trim(Related_Control_37, side = "both"))
>>>>>>> 62a325e296218945a12e11681cc48cef2fcee0b8
Gephi_Controls4 <- Gephi_Controls1 %>%
select (-Combined) %>%
gather(AllRelatedControls, Value, Related_Control_1:Related_Control_28, na.rm = TRUE) %>%
group_by(Main_Control) %>%
mutate(AllRelatedControls2 = paste("Related_Control", 1:n(), sep = "_")) %>%
rename(Related_Controls = Value) %>%
select(-AllRelatedControls, -AllRelatedControls2) %>%
ungroup() %>%
arrange(Main_Control)
<<<<<<< HEAD
#This removes 36 duplicates (ex. AU-6 & AU-12, AC-18 & AC-19)
Gephi_Controls5 <- unique(Gephi_Controls4)
#This provideds a new column -- "Weight" -- counts on the duplicates
=======
Gephi_Controls5 <- unique(Gephi_Controls4)
>>>>>>> 62a325e296218945a12e11681cc48cef2fcee0b8
Gephi_Controls6 <- Gephi_Controls4 %>%
# (Main_Control, Control_Name, Control_Family, Family_Name, Related_Controls )
group_by(Control_Family, Family_Name, Main_Control, Control_Name, Related_Controls) %>%
summarise(n = n()) %>%
rename("Weight"=n) #%>%
#arrange(desc(Weight))
<<<<<<< HEAD
#Create Node Table
#Capturing distinct Main Controls
Nodes <- distinct(Controls_mod, Control_Family, Family_Name, Main_Control, Control_Name)
Nodes
#Adding Name column
Nodes["Name"] = Nodes$Main_Control
Nodes
#Reordering and renaming columns
Nodes <- Nodes %>%
select (Main_Control, Name, Control_Name, Control_Family, Family_Name) %>%
rename("Id" = Main_Control)
#***~***~***
#Create Edges Table
Edges <- Gephi_Controls4 %>%
=======
nodes <- distinct(Controls_mod, Control_Family, Family_Name, Main_Control, Control_Name)
nodes["Label"] = nodes$Main_Control
nodes <- nodes %>%
select (Main_Control, Label, Control_Name, Control_Family, Family_Name) %>%
rename("Id" = Main_Control)
nodes = nodes[complete.cases(nodes$Id),]
write_csv(nodes, "Nodes.csv") #exporting the Node file into a csv file called Nodes.csv into your working directory you set earlier.
edges <- Gephi_Controls4 %>%
>>>>>>> 62a325e296218945a12e11681cc48cef2fcee0b8
group_by(Main_Control, Related_Controls) %>%
summarise(n = n()) %>%
rename(Source = Main_Control, Target = Related_Controls, Weight=n) #%>%
#arrange(desc(Weight))
<<<<<<< HEAD
Edges
#Turning Networks into igraph objects
net <- graph_from_data_frame(d=Edges, vertices=Nodes, directed=T)
library(sqldf)
install.packages("plyr")
install.packages("plyr")
install.packages("sqldf")
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(readr)
library(tidyverse)
library(ggplot2)
library(igraph)
library(dplyr)
library(plyr)
library(sqldf)
#Turning Networks into igraph objects
net <- graph_from_data_frame(d=Edges, vertices=Nodes, directed=T)
=======
write_csv(edges, "Edges.csv") #exporting the Edge file into a csv file called Edges.csv into your working directory you set earlier.
setwd("/Users/eugenehwang/Documents/GitHub/FedRAMP_800-53_Controls/Gephi")
>>>>>>> 62a325e296218945a12e11681cc48cef2fcee0b8
